{"version":3,"sources":["Tools/config.js","Store/Actions/manageEmojisReducer.js","Tools/helper.js","Store/Middleware/apiEmojiSearch.js","Store/Actions/manageAuthReducer.js","Store/Middleware/serverAuth.js","Static/components/Logo.jsx","Auth/Login.jsx","Auth/Registration.jsx","Pages/NotFound.jsx","Auth/Logout.jsx","Static/components/HeaderIfLoggedIn.jsx","Static/components/HeaderIfLoggedOut.jsx","Static/components/Footer.jsx","Pages/DashboardPage/components/DashSidebarNav.jsx","Pages/DashboardPage/components/DashWidgetSearchForm.jsx","Tools/widgetData.js","Static/components/Widget.jsx","Static/components/WidgetsList.jsx","Pages/DashboardPage/components/DashWidgetSection.jsx","Pages/DashboardPage/containers/Dashboard.jsx","Pages/EmojiSearchPage/components/EmojiSearchForm.jsx","Pages/EmojiSearchPage/components/Emoji.jsx","Pages/EmojiSearchPage/containers/EmojiList.jsx","Pages/EmojiSearchPage/containers/SidebarFilter.jsx","Static/components/EmojiSaveResponse.jsx","Pages/EmojiSearchPage/containers/EmojiContainer.jsx","Main/App.jsx","serviceWorker.js","Store/reducer.js","index.js"],"names":["retrieveFrom","baseEndpoint","categoriesUrl","baseUrl","loggedIn","sessions","registrations","logout","users_path","emojis_path","accessKey","innyMinnyMineyMo","arr","Math","floor","random","length","initialState","emojis","emojisCategories","emojisFilteredState","emojiSearchResults","currentUsersSavedEmojis","emojisLoading","categoriesLoading","responseMessage","START_LOAD_EMOJIS_REQUEST","ADD_EMOJIS","USER_SAVES_EMOJI","ADD_EMOJI_SAVE_RESPONSE_MESSAGE","ADD_USERS_SAVED_EMOJIS","START_LOAD_CATEGORIES_REQUEST","ADD_CATEGORIES","QUERY_EMOJIS","FILTER_EMOJIS","CLEAR_EMOJIS_ON_LOGOUT","addEmojis","type","payload","addEmojiSaveResponseMessage","addUsersSavedEmojis","filterEmojis","catName","filter","emoji","group","helper","userData","undefined","user","data","id","attrs","attributes","email","username","slice","toUpperCase","currentUser","loggedInStatus","PROCEED_IF_LOGGED_IN","SIGNUP_USER","LOGIN_USER","LOGOUT_USER","proceedIfUserLoggedIn","Logo","className","href","role","aria-label","Login","props","useState","password","formData","setFormData","state","useSelector","authRed","dispatch","useDispatch","userIsLoggedIn","handleChange","event","target","name","value","onSubmit","preventDefault","a","loginPath","axios","post","withCredentials","response","session","status","savedEmojis","alert","message","getExistingUser","history","replace","push","onChange","placeholder","required","to","Registration","signupPath","createNewUser","NotFound","Logout","onClick","logoutPath","delete","HeaderIfLoggedIn","emojisRed","activeClassName","HeaderIfLoggedOut","Footer","DashSidebarNav","DashWidgetSearchForm","widgets","icon","path","Widget","widget","WidgetsList","renderWidgets","map","index","key","DashWidgetSection","Dashboard","renderUsersEmojis","character","EmojiSearchForm","query","setQuery","setTimeout","unicodeName","startsWith","includes","queryEmojis","Emoji","currEmoji","useRef","onMouseEnter","nativeEvent","offsetX","offsetY","current","firstElementChild","style","display","zIndex","console","log","onMouseLeave","ref","title","slug","getState","success","error","text","EmojiList","loading","allEmojis","validateSearchResults","validateFilteredState","getEmojis","forEach","Object","keys","variants","variant","renderEmojis","SidebarFilter","refEmojis","customSlugs","handleCategoryClick","category","dataset","renderCategoriesList","cat","data-name","textContent","EmojiSaveResponse","EmojiContainer","App","this","loadEmojis","loadCategories","validateSession","render","component","exact","Component","connect","url","categories","loggedInPath","get","logged_in","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.133b5b1b.chunk.js","sourcesContent":["export const retrieveFrom = {\n     thirdPartyApiEndpoints: {\n          baseEndpoint: \"https://emoji-api.com/emojis?\",\n          categoriesUrl: \"https://emoji-api.com/categories?\"\n     },\n     backendServerEndpoints: {\n          // baseUrl: \"http://localhost:3001/api/v1\",\n          baseUrl: \"https://gomojii.herokuapp.com/\",\n          loggedIn: \"logged_in\",\n          sessions: \"sessions\",\n          registrations: \"registrations\",\n          logout: \"logout\",\n          users_path: 'users',\n          emojis_path: 'emojis',\n     },\n     security: {\n          accessKey: \"access_key=d03843fe82d5fde7ef6ac67d80fa41b12aae4321\"\n     },\n     customMethods: {\n          innyMinnyMineyMo: arr => {\n               return arr[Math.floor(Math.random() * arr.length)]\n          }\n     }\n}","//! EMOJI SEARCH FEATURE - REDUCER\n\n//todo: setting my initial state for the emojiSearch Feature\nconst initialState = {\n     emojis: [],\n     emojisCategories: [],\n     emojisFilteredState: [],\n     emojiSearchResults: [],\n     currentUsersSavedEmojis: [],\n     emojisLoading: false,\n     categoriesLoading: false,\n     responseMessage: ''\n}\n\n//todo: this is my reducer handling all types of emojiSearch functions eg. adding emojis and searching through them\nexport default function manageEmojis(state = initialState, action) {\n     switch (action.type) {\n          case START_LOAD_EMOJIS_REQUEST:\n               return {\n                    ...state,\n                    emojisLoading: true,\n               }\n          case ADD_EMOJIS:\n               return {\n                    ...state,\n                    emojis: action.payload.emojis,\n                    emojisLoading: false\n          }\n          case START_LOAD_CATEGORIES_REQUEST:\n               return {\n                    ...state,\n                    categoriesLoading: true,\n               }\n          case ADD_CATEGORIES:\n               return {\n                    ...state,\n                    emojisCategories: action.payload.emojisCategories,\n                    categoriesLoading: false\n               }\n          case QUERY_EMOJIS:\n               return {\n                    ...state,\n                    emojiSearchResults: action.payload.emojiSearchResults,\n                    emojisFilteredState: []\n               }\n          \n          case FILTER_EMOJIS:\n               return {\n                    ...state,\n                    emojisFilteredState: action.payload.emojisFilteredState,\n                    emojiSearchResults: []\n               }\n          case USER_SAVES_EMOJI:\n               return {\n                    ...state,\n                    responseMessage: \"\",\n                    currentUsersSavedEmojis: [...state.currentUsersSavedEmojis, action.payload.emoji],\n               }\n          case ADD_EMOJI_SAVE_RESPONSE_MESSAGE:\n               return {\n                    ...state,\n                    responseMessage: action.payload.responseMessage,\n               }\n          case ADD_USERS_SAVED_EMOJIS:\n               return {\n                    ...state,\n                    currentUsersSavedEmojis: action.payload.currentUsersSavedEmojis,\n               }\n          case CLEAR_EMOJIS_ON_LOGOUT:\n               return {\n                    ...state,\n                    currentUsersSavedEmojis: []\n               }\n          default:\n               return state;\n     }\n}\n\n//! EMOJI SEARCH FEATURE - ACTION TYPES\nconst START_LOAD_EMOJIS_REQUEST = \"START_LOAD_EMOJIS_REQUEST\"\nconst ADD_EMOJIS = \"ADD_EMOJIS\"\nconst USER_SAVES_EMOJI = \"USER_SAVES_EMOJI\"\nconst ADD_EMOJI_SAVE_RESPONSE_MESSAGE = \"ADD_EMOJI_SAVE_RESPONSE_MESSAGE\"\nconst ADD_USERS_SAVED_EMOJIS = \"ADD_USERS_SAVED_EMOJIS\"\nconst START_LOAD_CATEGORIES_REQUEST = \"START_LOAD_CATEGORIES_REQUEST\"\nconst ADD_CATEGORIES = \"ADD_CATEGORIES\"\nconst QUERY_EMOJIS = \"QUERY_EMOJIS\"\nconst FILTER_EMOJIS = \"FILTER_EMOJIS\"\nconst CLEAR_EMOJIS_ON_LOGOUT = \"CLEAR_EMOJIS_ON_LOGOUT\"\n\n//! EMOJI SEARCH FEATURE - ACTION CREATORS\n\n//todo: load and add emojis \nexport const startLoadEmojisRequest = () => ({\n     type: START_LOAD_EMOJIS_REQUEST\n})\n\nexport const addEmojis = emojis => ({\n     type: ADD_EMOJIS,\n     payload: {\n          emojis\n     }\n})\n\n//todo: user saves emoji\nexport const userSavesEmoji = emoji => ({\n     type: USER_SAVES_EMOJI,\n     payload: {\n          emoji\n     }\n})\n\n//todo: emoji success message handler\nexport const addEmojiSaveResponseMessage = responseMessage => ({\n     type: ADD_EMOJI_SAVE_RESPONSE_MESSAGE,\n     payload: {\n          responseMessage\n     }\n})\n\n//todo: add users saved emojis\nexport const addUsersSavedEmojis = currentUsersSavedEmojis => ({\n     type: ADD_USERS_SAVED_EMOJIS,\n     payload: {\n          currentUsersSavedEmojis\n     }\n})\n\n//todo: load and add categories \nexport const startLoadCategories = () => ({\n     type: START_LOAD_CATEGORIES_REQUEST\n})\n\nexport const addCategories = emojisCategories => ({\n     type: ADD_CATEGORIES,\n     payload: {\n          emojisCategories: emojisCategories.filter(cat => cat.slug !== 'component')\n     }\n})\n\n//todo: query through emojis \nexport const queryEmojis = (query, emojis) => ({\n     type: QUERY_EMOJIS,\n     payload: {\n          emojiSearchResults: emojis.filter(emoji => emoji.unicodeName.startsWith(query) || emoji.unicodeName.includes(query))\n     }\n})\n\n//todo: filter through emojis\nexport const filterEmojis = (catName, emojis) => ({\n     type: FILTER_EMOJIS,\n     payload: {\n          emojisFilteredState: emojis.filter(emoji => emoji.group === catName)\n     }\n})\n\nexport const clearEmojisOnLogout = () => ({\n     type: CLEAR_EMOJIS_ON_LOGOUT\n})\n\n//!################################################","export const helper = {\n     userIsLoggedIn: userData => {\n          return userData.user !== undefined\n     },\n     currentUser: userData => {\n          const { id, attributes: attrs } = userData.user.data\n          let { email, username, emojis } = attrs\n          //Standardize username\n          username = username.slice(0, 1).toUpperCase() + username.slice(1)\n          return {\n               id,\n               email,\n               username,\n               emojis\n          }\n     },\n}","//! importing necessary files and/or libraries\nimport { retrieveFrom } from '../../Tools/config'\nimport axios from 'axios'\nimport {\n     startLoadEmojisRequest,\n     addEmojis, \n     startLoadCategories, \n     addCategories,\n     userSavesEmoji,\n     addEmojiSaveResponseMessage\n} from '../Actions/manageEmojisReducer'\nimport { helper } from '../../Tools/helper'\n\n//todo: returns my endpoint urls from my config file\n//todo: After retrieving the endpoints and access key, I pick them out using destructuring \nconst { baseEndpoint, categoriesUrl } = retrieveFrom.thirdPartyApiEndpoints\nconst { baseUrl, users_path, emojis_path } = retrieveFrom.backendServerEndpoints\nconst { accessKey } = retrieveFrom.security\nconst { currentUser } = helper\n\nexport const loadEmojis = () => {\n     //todo: funtion returned in enhanced thunk action creator \n     //todo: Fetching all emojis after a successful load\n     return async dispatch => {\n          dispatch(startLoadEmojisRequest())\n          const response = await axios({ url: baseEndpoint + accessKey })\n          const emojis = response.data\n          dispatch(addEmojis(emojis))\n     }\n}\n\nexport const loadCategories = () => {\n     //todo: funtion returned in enhanced thunk action creator \n     //todo: Fetching all categories after a successful load\n     return async dispatch => {\n          dispatch(startLoadCategories())\n          const response = await axios({ url: categoriesUrl + accessKey })\n          const categories = response.data\n          dispatch(addCategories(categories))\n     }\n}\n\nexport const saveEmoji = (slug, character) => {\n     //todo: funtion returned in enhanced thunk action creator \n     //todo: Fetch post request to save an emoji\n     return async (dispatch, getState) => {\n          const { userData } = getState().authRed\n          const response = await axios\n               .post(\n                    `${baseUrl}${users_path}/${currentUser(userData).id}${emojis_path}`,\n                    { slug, character },\n                    { withCredentials: true }\n               )\n          if (response.data.emoji) {\n               dispatch(userSavesEmoji(response.data.emoji))\n               dispatch(addEmojiSaveResponseMessage(response.data.success))\n          } else {\n               dispatch(addEmojiSaveResponseMessage(response.data.error))\n          }\n     }\n}","//! AUTH - REDUCER\n\n//todo: setting my initial state for user authentication\nconst initialState = {\n     userData: {},\n     loggedInStatus: \"NOT_LOGGED_IN\",\n}\n\n//todo: this is my reducer handling all types of emojiSearch functions eg. adding emojis and searching through them\nexport default function manageAuth(state = initialState, action) {\n     switch (action.type) {\n          case PROCEED_IF_LOGGED_IN:\n               return {\n                    ...state,\n                    userData: action.payload.userData,\n                    loggedInStatus: \"LOGGED_IN\"\n               }\n          case SIGNUP_USER:\n               return {\n                    ...state,\n                    userData: action.payload.userData,\n                    loggedInStatus: \"LOGGED_IN\"\n               }\n          case LOGIN_USER:\n               return {\n                    ...state,\n                    userData: action.payload.userData,\n                    loggedInStatus: \"LOGGED_IN\",\n               }\n          case LOGOUT_USER:\n               return {\n                    ...state,\n                    userData: {},\n                    loggedInStatus: \"NOT_LOGGED_IN\"\n               }\n          default:\n               return state\n     }\n}\n\n//! AUTH - ACTION TYPES\nconst PROCEED_IF_LOGGED_IN = \"PROCEED_IF_LOGGED_IN\"\nconst SIGNUP_USER = \"SIGNUP_USER\"\nconst LOGIN_USER = \"LOGIN_USER\"\nconst LOGOUT_USER = \"LOGOUT_USER\"\n\n//! AUTH - ACTION CREATORS\n\n//todo: checking if user is already logged in\nexport const proceedIfUserLoggedIn = (userData, loggedInStatus) => ({\n     type: PROCEED_IF_LOGGED_IN,\n     payload: {\n          userData,\n          loggedInStatus\n     }\n})\n\n//todo: signup user\nexport const signupUser = userData => ({\n     type: SIGNUP_USER,\n     payload: {\n          userData\n     }\n})\n\n//todo: login user\nexport const loginUser = userData => ({\n     type: LOGIN_USER,\n     payload: {\n          userData\n     }\n})\n\n//todo: logout user\nexport const logoutUser = () => ({\n     type: LOGOUT_USER\n})\n\n//!################################################","//! importing necessary files and/or libraries\nimport { retrieveFrom } from '../../Tools/config'\nimport axios from 'axios'\nimport { signupUser, loginUser, logoutUser, proceedIfUserLoggedIn } from '../Actions/manageAuthReducer'\nimport { clearEmojisOnLogout, addUsersSavedEmojis } from '../Actions/manageEmojisReducer'\nimport { helper } from '../../Tools/helper'\n\n//todo: returns my endpoint urls from my config file\n//todo: After retrieving the endpoints and access key, I pick them out using destructuring \nconst { baseUrl, loggedIn, registrations, sessions, logout } = retrieveFrom.backendServerEndpoints\nconst { currentUser } = helper\n\nexport const validateSession = (loggedInStatus) => {\n     //todo: funtion returned in enhanced thunk action creator \n     //todo: Checking if user is logged in\n     return async dispatch => {\n          const loggedInPath = baseUrl + loggedIn\n          const response = await axios\n               .get(\n                    loggedInPath,\n                    { withCredentials: true }\n               )\n          const userData = response.data\n          if (userData.logged_in && loggedInStatus === \"NOT_LOGGED_IN\") {\n               loggedInStatus = \"LOGGED_IN\"\n               dispatch(proceedIfUserLoggedIn(userData, loggedInStatus))\n               dispatch(addUsersSavedEmojis(currentUser(userData).emojis))\n          } else if (!userData.logged_in && loggedInStatus === \"LOGGED_IN\") {\n               loggedInStatus = \"NOT_LOGGED_IN\"\n          }\n     }\n}\n\nexport const createNewUser = formData => {\n     //todo: funtion returned in enhanced thunk action creator \n     //todo: Creating a user after a successful fetch\n     return async dispatch => {\n          const signupPath = baseUrl + registrations\n          const response = await axios\n               .post(\n                    signupPath,\n                    formData,\n                    { withCredentials: true }\n               )\n          const user = response.data\n          dispatch(signupUser(user))\n     }\n}\n\nexport const getExistingUser = formData => {\n     //todo: funtion returned in enhanced thunk action creator \n     //todo: Retrieving existing user after successful fetch\n     return async dispatch => {\n          const loginPath = baseUrl + sessions\n          const response = await axios\n               .post(\n                    loginPath,\n                    formData,\n                    { withCredentials: true }\n               )\n          const session = response.data\n          if (session.status === 'created') {\n               const savedEmojis = session.user.data.attributes.emojis\n               dispatch(loginUser(session))\n               dispatch(addUsersSavedEmojis(savedEmojis))\n          } else {\n               alert(session.message)\n          }\n     }\n}\n\nexport const endUsersSession = () => {\n     //todo: function returned in enhanced thunk action creator \n     //todo: Creating delete request to logout a user\n     return async dispatch => {\n          const logoutPath = baseUrl + logout\n          await axios\n               .delete(\n                    logoutPath,\n                    { withCredentials: true }\n               )\n          dispatch(clearEmojisOnLogout())\n          dispatch(logoutUser())\n     }\n}","import React from 'react';\n\nconst Logo = () => {\n     return (\n          <>\n               <h1 className=\"logo-name\">\n                    <a href=\"/emojis\">\n                         {/* <img src=\"images/gomojii-logo-3.png\" alt=\"logo\"/> */}\n                         G<span role=\"img\" aria-label=\"funny face tongue out emoji\" className=\"logo-emoji-letter\">🤪</span>m<span role=\"img\" aria-label=\"robot emoji\" className=\"logo-emoji-letter\">🤖</span>jii\n                    </a>\n               </h1>\n          </>\n     );\n}\n\nexport default Logo;","import React from 'react';\nimport { getExistingUser } from '../Store/Middleware/serverAuth';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Logo from '../Static/components/Logo';\nimport { helper } from '../Tools/helper'\nimport { useState } from 'react';\n\nconst Login = (props) => {\n     //todo: setting up initial state via useState hooks\n     const [formData, setFormData] = useState({email: '', password: ''})\n\n     //todo: getting userData property from store\n     const state = useSelector(state => ({\n          userData: state.authRed.userData\n     }))\n     const dispatch = useDispatch()\n     const { userData } = state\n     const { userIsLoggedIn } = helper\n     \n     //todo: handling input change / controlled form/component\n     const handleChange = event => {\n          setFormData({\n               ...formData,\n               [event.target.name]: event.target.value\n          })\n     }\n\n     const handleSubmit = event => {\n          event.preventDefault()\n\n          //todo: borrowing getExisitingUser function/action from store\n          dispatch(getExistingUser(formData))\n          setFormData({\n               email: '',\n               password: ''\n          })\n          return userIsLoggedIn(userData) ? props.history.replace('/') : props.history.push('/login')\n     }\n     \n     return ( \n          <form className=\"login-form\" onSubmit={handleSubmit}>\n               <div className=\"logo-on-form\">\n                    <Logo />\n               </div>\n               <div className=\"login-email login-field\">\n                    <input\n                         type=\"email\"\n                         name=\"email\"\n                         value={formData.email}\n                         onChange={handleChange}\n                         placeholder=\"Email\"\n                         required\n                    />\n               </div>\n               <div className=\"login-password login-field\" >\n                    <input\n                         type=\"password\"\n                         name=\"password\"\n                         value={formData.password}\n                         onChange={handleChange}\n                         placeholder=\"Password\"\n                         required\n                    />\n               </div>\n               <div className=\"login-btn-cont\">\n                    <button className=\"login-btn\" type=\"submit\">Login</button>\n               </div>\n               <p className=\"not-user-yet\">Don''t have an account? <Link to=\"/signup\">Signup</Link></p>\n               <div className=\"form-footer\">\n                    <span role=\"img\" aria-label=\"copyright emoji\">©️</span> 2020 Gomojii | <Link to=\"/emojis\">Home</Link> \n               </div>\n          </form>\n     );\n}\n\nexport default Login;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createNewUser } from '../Store/Middleware/serverAuth';\nimport { Link } from 'react-router-dom';\nimport Logo from '../Static/components/Logo';\nimport { useState } from 'react';\nimport { helper } from '../Tools/helper'\n\nconst Registration = (props) => {\n     const [formData, setFormData] = useState({email: '', username: '', password: ''})\n\n     const userData = useSelector(state => state.authRed.userData)\n     const dispatch = useDispatch()\n\n     const { userIsLoggedIn } = helper\n\n     const handleChange = event => {\n          setFormData({\n               ...formData,\n               [event.target.name]: event.target.value\n          })\n     }\n\n     const handleSubmit = event => {\n          event.preventDefault()\n          \n          dispatch(createNewUser(formData))\n          return userIsLoggedIn(userData) ? props.history.replace('/') : props.history.push('/signup')\n     }\n     \n     return ( \n          <form className=\"signup-form\" onSubmit={handleSubmit}>\n               <div className=\"logo-on-form\">\n                    <Logo />\n               </div>\n               <div className=\"signup-email signup-field\">\n                    <input\n                         type=\"email\"\n                         name=\"email\"\n                         placeholder=\"Email\"\n                         value={formData.email}\n                         onChange={handleChange}\n                         required\n                    />\n               </div>\n               <div className=\"signup-username signup-field\" >\n                    <input\n                         type=\"username\"\n                         name=\"username\"\n                         placeholder=\"Username\"\n                         value={formData.username}\n                         onChange={handleChange}\n                         required\n                    />\n               </div>\n               <div className=\"signup-password signup-field\" >\n                    <input\n                         type=\"password\"\n                         name=\"password\"\n                         placeholder=\"Password\"\n                         value={formData.password}\n                         onChange={handleChange}\n                         required\n                    />\n               </div>\n               <div className=\"signup-btn-cont\">\n                    <button className=\"signup-btn\" type=\"submit\">Signup</button>\n               </div>\n               <p className=\"already-user\">Already a user? <Link to=\"/login\">Login</Link></p>\n               <div className=\"form-footer\">\n                    <span role=\"img\" aria-label=\"copyright emoji\">©️</span> 2020 Gomojii | <Link to=\"/emojis\">Home</Link> \n               </div>\n          </form>\n     );\n}\n\nexport default Registration;","import React from 'react'\n\nconst NotFound = () => {\n     return ( \n          <div>\n               <h1>NOT FOUND MY FRIEND</h1>\n          </div>\n     );\n}\n\nexport default NotFound;","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { endUsersSession } from '../Store/Middleware/serverAuth';\n\nconst Logout = () => {\n     const dispatch = useDispatch()\n     \n     //todo: getting endUsersSession action from store\n     const logout = () => {\n          dispatch(endUsersSession())\n     }\n     return ( \n          <a href='/login' onClick={logout}>Logout</a>\n     );\n}\n\nexport default Logout;","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { helper } from '../../Tools/helper'\nimport Logo from './Logo'\nimport { Link, NavLink } from 'react-router-dom'\nimport Logout from '../../Auth/Logout'\n\nconst HeaderIfLoggedIn = () => {\n     const state = useSelector(state => ({\n          userData: state.authRed.userData,\n          currentUsersSavedEmojis: state.emojisRed.currentUsersSavedEmojis\n     }))\n     const { currentUser } = helper\n     const { userData, currentUsersSavedEmojis } = state\n\n     return (\n          <header className=\"header-logged-in\">\n               <div className=\"logo-area-header\">\n                    <Logo />\n               </div>\n               <ul className=\"nav-btns\">\n                    <li className=\"home-link\">\n                         <NavLink activeClassName=\"active\" to=\"/emojis\">\n                              <span className=\"home-btn nav-icon\" role=\"img\" aria-label=\"home emojis\">🏠</span> Home\n                         </NavLink>\n                    </li>\n                    <li className=\"dashboard\">\n                         <NavLink activeClassName=\"active\" to=\"/\">\n                              <span className=\"controller-btn nav-icon\" role=\"img\" aria-label=\"controller emoji\">🎮</span> Dashboard\n                         </NavLink>\n                    </li>\n                    <li className=\"favmojis nav-link\">\n                         <Link to=\"#\">\n                              <div\n                                   className=\"loading-indicator-in-header\">\n                                   <span className=\"heart-moji\" role=\"img\" aria-label=\"heart emoji\">❤️</span>\n                                   <span className=\"save-count\">{ currentUsersSavedEmojis.length }</span>\n                              </div>\n                         </Link>\n                    </li>\n                    <li className=\"username nav-link\">\n                         <i className=\"fas fa-user user-icon\"></i>\n                         { currentUser(userData).username }\n                    </li>\n                    <li className=\"logout-btn nav-link\">\n                         <span role=\"img\" aria-label=\"peace sign emoji\">✌</span><Logout />\n                    </li>\n               </ul>\n          </header>\n     )\n}\n\nexport default HeaderIfLoggedIn\n","import React from 'react'\nimport Logo from './Logo'\nimport { NavLink } from 'react-router-dom'\n\nconst HeaderIfLoggedOut = () => {\n     return (\n          <header className=\"header-logged-out\">\n               <div className=\"logo-area-header\">\n                    <Logo />\n               </div>\n               <ul className=\"nav-btns\">\n                    <li className=\"home-link\">\n                         <NavLink activeClassName=\"active\" to=\"/emojis\">\n                              <span className=\"home-btn nav-icon\" role=\"img\" aria-label=\"home emojis\">🏠</span> Home\n                         </NavLink>\n                    </li>\n                    <li className=\"login-btn nav-link\">\n                         <NavLink activeClassName=\"active\" to=\"/login\"><span role=\"img\" aria-label=\"woman on computer emoji\" className=\"nav-icon\">👩‍💻</span> Login</NavLink>\n                    </li>\n                    <li className=\"signup-btn nav-link\">\n                         <NavLink activeClassName=\"active\" to=\"/signup\"><span role=\"img\" aria-label=\"woman raising hand\" className=\"nav-icon\">🙋🏽‍♂️</span> Signup</NavLink>\n                    </li>\n               </ul>\n          </header>\n     )\n}\n\nexport default HeaderIfLoggedOut\n","import React from 'react'\n\nconst Footer = () => {\n     return (\n          <>\n               <span role=\"img\" aria-label=\"copyright emoji\">©️</span> 2020 GoMojii\n          </>\n     )\n}\n\nexport default Footer\n","import React from 'react'\nimport { helper } from '../../../Tools/helper'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\nimport Footer from '../../../Static/components/Footer'\n\nconst DashSidebarNav = () => {\n     const userData = useSelector(state => state.authRed.userData)\n     const { currentUser, userIsLoggedIn } = helper\n\n     const renderWelcomeMessage = () => {\n          return userIsLoggedIn(userData) ? currentUser(userData).username : null\n     }\n\n     return (\n          <>\n               <h2 className=\"dash-welcome\"><span role=\"img\" aria-label=\"wave emoji\">👋🏽</span> { renderWelcomeMessage() }</h2>\n               <ul>\n                    <li>\n                         <div className=\"dash-sidenav-icon\">\n                              <span role=\"img\" aria-label=\"glance emoji\">🧐</span>\n                         </div>\n                         <div>\n                              <NavLink\n                                   to=\"#\"\n                                   activeClassName=\"dash-sidebar-item-active\">\n                                   At A Glance     \n                              </NavLink>\n                         </div>\n                    </li>\n                    <li>\n                         <div className=\"dash-sidenav-icon\">\n                              <span role=\"img\" aria-label=\"info emoji\">ℹ️</span>\n                         </div>\n                         <div>\n                              <NavLink\n                                   to=\"#\"\n                                   activeClassName=\"dash-sidebar-item-active\">\n                                   About     \n                              </NavLink>\n                         </div>\n                    </li>\n                    <li>\n                         <div className=\"dash-sidenav-icon\">\n                              <span role=\"img\" aria-label=\"email emoji\">📩</span>\n                         </div>\n                         <div>\n                              <NavLink\n                                   to=\"#\"\n                                   activeClassName=\"dash-sidebar-item-active\">\n                                   Contact     \n                              </NavLink>\n                         </div>\n                    </li>\n                    <li>\n                         <div className=\"dash-sidenav-icon\">\n                              <span role=\"img\" aria-label=\"gear emoji\">⚙️</span>\n                         </div>\n                         <div>\n                              <NavLink\n                                   to=\"#\"\n                                   activeClassName=\"dash-sidebar-item-active\">\n                                   Settings     \n                              </NavLink>\n                         </div>\n                    </li>\n               </ul>\n               <div className=\"dash-sidebar-footer\">\n                    <Footer />\n               </div>\n          </>\n     )\n}\n\nexport default DashSidebarNav\n","import React from 'react'\n\nconst DashWidgetSearchForm = () => {\n     return (\n          <form onSubmit={ (event) => event.preventDefault() } >\n               <div className=\"widget-search-cont\">\n                    <input\n                         type=\"search\"\n                         placeholder=\"Search widgets\" \n                    />\n                    <button type=\"submit\">\n                         <span\n                              role=\"img\"\n                              aria-label=\"magnifying glass emoji\">\n                              🔍\n                         </span>\n                    </button>\n               </div>\n          </form>\n     )\n}\n\nexport default DashWidgetSearchForm\n","export const widgets = [\n     {\n          icon: '🔍',\n          name: \"Emoji Search\",\n          path: '/emojis'\n     },\n     {\n          icon: '🌤️',\n          name: \"Emoji Weather\",\n          path: '#'\n     }\n]","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Widget = ({ widget }) => {\n\n     return (\n          <>\n               <div className=\"overlay\"></div>\n               <Link to={widget.path}>\n                    <li className=\"widget-cont\">\n                         <div className=\"widget-icon\">\n                              <span>{ widget.icon }</span>\n                         </div>\n                         <div className=\"widget-name\">\n                              <span>{ widget.name }</span>\n                         </div>\n                    </li>\n               </Link>\n          </>\n     )\n}\n\nexport default Widget\n","import React from 'react'\nimport { widgets } from '../../Tools/widgetData'\nimport Widget from './Widget'\n\nconst WidgetsList = () => {\n     const renderWidgets = widgets.map((widget, index) => {\n          return <Widget key={index} widget={widget} />\n     })\n\n     return (\n          <ul>\n               {renderWidgets}\n               <li className=\"coming-soon\">More coming soon...</li>\n          </ul>\n     )\n}\n\nexport default WidgetsList\n","import React from 'react'\nimport DashWidgetSearchForm from './DashWidgetSearchForm'\nimport WidgetsList from '../../../Static/components/WidgetsList'\n\nconst DashWidgetSection = () => {\n     return (\n          <>\n               <h3>Widgets</h3>\n               <div className=\"widget-search-form\">\n                    <DashWidgetSearchForm />\n               </div>\n               <div className=\"widgets\">\n                    <WidgetsList />\n               </div>\n          </>\n     )\n}\n\nexport default DashWidgetSection\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport DashSidebarNav from '../components/DashSidebarNav'\nimport DashWidgetSection from '../components/DashWidgetSection'\n\nconst Dashboard = () => {\n     const currentUsersSavedEmojis = useSelector(state => state.emojisRed.currentUsersSavedEmojis)\n     // debugger\n     const renderUsersEmojis = currentUsersSavedEmojis.length > 0 && currentUsersSavedEmojis.map((emoji, index) => {\n          // debugger\n          return <li key={index}>{ emoji.character }</li>\n     })\n     return (\n          <div className=\"dashboard\"> \n               <div className=\"dash-sidebar-nav\">\n                    <DashSidebarNav />     \n               </div>    \n               <div className=\"dash-mid-section\">\n                    <h3>At a Glance</h3>\n                    <ul>\n                         { renderUsersEmojis }\n                    </ul>\n               </div>\n               <div className=\"widget-section\">  \n                    <DashWidgetSection />\n               </div>\n               {/* DashMidSection\n                    - Nav item as Title\n                    - content pertaining to nav item ^\n               WidgetSection\n                    - Widgets\n                    - Widget search form \n                    - Widgets list */}\n          </div>\n     )\n}\n\nexport default Dashboard\n","import React from 'react';\nimport { queryEmojis } from '../../../Store/Actions/manageEmojisReducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nconst EmojiSearchForm = () => {\n     const [query, setQuery] = useState('')\n\n     //todo: using the react hooks useSelector and useDispatch to access the store\n     const emojis = useSelector(state => state.emojisRed.emojis)\n     const dispatch = useDispatch()\n\n     //todo: this fucntion handles the querying through emojis as a user types something \n     const handleEmojiSearch = event => {\n          setQuery(event.target.value)\n          setTimeout(() => dispatch(queryEmojis(query, emojis)), 500)\n     }\n\n     //todo: rendering form\n     return (\n          <form onSubmit={ (event) => event.preventDefault() } >\n               <div className=\"search-cont\">\n                    <input\n                         onChange={ handleEmojiSearch }\n                         type=\"search\"\n                         placeholder=\"✍  Describe emoji in a few words\" \n                    />\n                    <button type=\"submit\">\n                         <span role=\"img\" aria-label=\"magnifying glass emoji\">🔍</span>\n                    </button>\n               </div>\n          </form>\n     );\n}\n\nexport default EmojiSearchForm;","import React, { useState } from 'react';\nimport { useRef } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { useDispatch } from 'react-redux';\nimport { saveEmoji } from '../../../Store/Middleware/apiEmojiSearch';\n\nconst Emoji = ({ emoji }) => {\n     const dispatch = useDispatch()\n     const currEmoji = useRef(null)\n\n     const showCopyOrSaveModal = event => {\n          let x = event.nativeEvent.offsetX\n          let y = event.nativeEvent.offsetY\n          \n          currEmoji.current.firstElementChild.style.display = 'grid'\n          currEmoji.current.style.zIndex = \"1000\"\n          // if (x <= 300) {\n          //      currEmoji.current.firstElementChild.style.position = 'absolute'\n          //      currEmoji.current.firstElementChild.style.zIndex = '6'\n          //      currEmoji.current.firstElementChild.style.right = '0'\n          //      currEmoji.current.firstElementChild.style.left = '20px'\n          //      currEmoji.current.firstElementChild.style.borderTopLeftRadius = '20px'\n          //      currEmoji.current.firstElementChild.style.borderTopRightRadius = '20px'\n          //      currEmoji.current.firstElementChild.style.borderBottomRightRadius = '20px'\n          //      currEmoji.current.firstElementChild.style.borderBottomLeftRadius = '0'\n          // }\n\n          console.log(`X - ${event.nativeEvent.offsetX}`)\n          console.log(`Y - ${event.nativeEvent.offsetY}`)\n          console.log(\"=============================\")\n     }\n\n     const hideCopyOrSaveModal = () => {\n          currEmoji.current.firstElementChild.style.display = \"none\";\n     }\n\n     const copySuccess = () => {\n          alert('Copied!')\n     }\n\n     return ( \n          <li\n               onMouseEnter={showCopyOrSaveModal}\n               onMouseLeave={hideCopyOrSaveModal}\n               ref={currEmoji}\n               className=\"emoji animate__animated animate__fadeIn animate__fast\"\n               title={emoji.unicodeName || emoji.slug}\n          >\n               {emoji.character}\n               <div\n                    className=\"emoji-overlay\"\n               >  \n                    <div className='modal-heading'>{emoji.unicodeName || emoji.slug}</div>\n                    <div className=\"modal-body\">\n                         <div className=\"emoji-char\">\n                              <span role='img' aria-label={emoji.unicodeName || emoji.slug}>{emoji.character}</span>\n                         </div>\n                         <div className=\"save-copy-btns\">\n                              <div className=\"save\">\n                                   <button onClick={() => dispatch(saveEmoji(emoji.slug, emoji.character))}><span role=\"img\" aria-label=\"floppy disk emoji\">💾</span> Save</button>\n                              </div>\n                              <div className=\"copy\">\n                                   <CopyToClipboard text={emoji.character}>\n                                        <button onClick={copySuccess}><span role=\"img\" aria-label=\"clipboard emoji\">📋</span> Copy</button>\n                                   </CopyToClipboard>\n                              </div>\n                         </div>\n                    </div>\n               </div>\n          </li>\n     );\n}\n\nexport default Emoji;","//! importing necessary files and/or libraries\nimport React from 'react';\nimport { useSelector } from 'react-redux'\nimport Emoji from '../components/Emoji';\nimport { retrieveFrom } from '../../../Tools/config'\n\nconst EmojiList = () => {\n\n     //todo: using react hook useSelector to retrieve 3 properties from state\n     const state = useSelector(state => ({\n          emojis: state.emojisRed.emojis,\n          emojiSearchResults: state.emojisRed.emojiSearchResults,\n          emojisFilteredState: state.emojisRed.emojisFilteredState,\n          emojisLoading: state.emojisRed.emojisLoading,\n          categoriesLoading: state.emojisRed.loading\n     }))\n     let { emojis, emojiSearchResults, emojisFilteredState, emojisLoading } = state\n     const { innyMinnyMineyMo } = retrieveFrom.customMethods\n\n     const showLoadIndicatorThenRenderEmojis = () => {\n          if (emojisLoading) {\n               return (\n                    <div className=\"load-wrapper\">\n                         <div className=\"loading-indicator animate__animated animate__bounce animate__repeat-3\">\n                              <div className=\"load-heading\">\n                                   Summoning Emojis...\n                              </div>\n                              <span role=\"img\" aria-label=\"heart emoji\">{ innyMinnyMineyMo(['👿', '🤠', '🤪', '🤡', '🤖', '💩', '👻', '🤩', '🥶']) }</span>\n                         </div>\n                    </div>\n               )\n          } else {\n               return null\n          }\n     }\n     \n     const getEmojis = () => {\n          //todo:validating particular properties from state \n          let validateSearchResults = emojiSearchResults !== null && emojiSearchResults !== undefined && emojiSearchResults.length > 0\n          let validateFilteredState = emojisFilteredState !== null && emojisFilteredState !== undefined && emojisFilteredState.length > 0\n\n          if (validateSearchResults) {\n               emojis = emojiSearchResults ? emojiSearchResults : []\n          } else if (validateFilteredState) {\n               emojis = emojisFilteredState ? emojisFilteredState : []\n          } else {\n               return emojis\n          }\n          return emojis\n     }\n\n     //todo: mapping information to each emoji component which is an li\n     const allEmojis = []\n     getEmojis().forEach(emoji => {\n          if (Object.keys(emoji).includes(\"variants\")) {\n               emoji.variants.forEach(variant => {\n                    allEmojis.push(variant)\n               })\n          } else {\n               allEmojis.push(emoji)\n          }\n     })\n     const renderEmojis = allEmojis.map((emoji, index) => {\n          return <Emoji key={index} emoji={emoji} />\n     })\n\n\n     //todo: rendering the result amount and the actual emojis\n     return (\n          <>\n               <div className=\"directions-and-results\">\n                    <div className=\"directions\">\n                         Click to bookmark <span role=\"img\" aria-label=\"bookmark emoji\">🔖</span><span role=\"img\" aria-label=\"winking emoji\"> emoji 😉</span>\n                    </div>\n                    <div className=\"results\">\n                         {allEmojis === null ? 0 : allEmojis.length} emojis found\n                    </div>\n               </div>\n               { showLoadIndicatorThenRenderEmojis() }\n               <ul>\n                    { renderEmojis }\n               </ul>\n          </>\n     );\n}\n\nexport default EmojiList;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { filterEmojis } from '../../../Store/Actions/manageEmojisReducer';\nimport Footer from '../../../Static/components/Footer';\n\nconst SidebarFilter = () => {\n     //todo: using react hooks useDispatch and useSelector to avoid using the connect function to attach this component to the store\n     const state = useSelector(state => ({\n          emojis: state.emojisRed.emojis,\n          emojisCategories: state.emojisRed.emojisCategories\n     }))\n     const dispatch = useDispatch()\n\n     //todo: customization of category names and icons\n     const refEmojis = [\"😃\", \"👩🏼‍🤝‍👨🏽\", \"🐶\", \"🍟\", \"🏔️\", \"🎳\", \"⌚\", \"♿\", \"🏁\"];\n     const customSlugs = ['Smileys', 'People & Body', 'Animal & Nature', 'Food & Drink', 'Travel', 'Activities', 'Items', 'Symbols', 'Flags']\n\n     const { emojis, emojisCategories } = state\n     \n     //todo: this handles the rendering of all emojis when the item \"All Emojis\" is clicked\n     const handleAllEmojiClick = event => {\n          if (event.target.textContent === \"All Emojis\") dispatch(filterEmojis(event.target.textContent, emojis))\n     }\n\n     //todo: this handles the rendering of a particular set of emojis when a category is clicked\n     const handleCategoryClick = event => {\n          const category = event.target.dataset.name\n          dispatch(filterEmojis(category, emojis))\n     }\n     \n     //todo: this creates LI tags of all categories in the sidebar filter and attaches the necessary event listeners to each one.\n     const renderCategoriesList = emojisCategories.map((cat, index) => {\n          return (\n               <li\n                    onClick={handleCategoryClick}\n                    key={index}\n                    data-name={cat.slug}\n               >\n                    <div\n                         className=\"acc-emoji\"\n                         data-name={cat.slug}\n                    >\n                         {refEmojis[index]}\n                    </div>\n                    <div\n                         className=\"category\"\n                         data-name={cat.slug}\n                    >\n                         {customSlugs[index]}\n                    </div>\n               </li>\n          )\n     })\n\n     //todo: this handles the actual rendering of all mapped LI's\n     return ( \n          <> \n               <h2><span role=\"img\" aria-label=\"magnifying-glass emoji\">🔎</span> Emojis <span role=\"img\" aria-label=\"looking emoji\">👀</span></h2>\n               <ul>\n                    <li\n                         onClick={handleAllEmojiClick}\n                         data-name=\"all-emojis\"\n                    >\n                         <div\n                              className=\"acc-emoji\"\n                              data-name=\"all-emojis\">\n                              <span role=\"img\" aria-label=\"present emoji\">💁🏽</span>\n                         </div>\n                         <div\n                              className=\"category\"\n                              data-name=\"all-emojis\"\n                         >\n                              All Emojis\n                         </div>\n                    </li>\n                    {renderCategoriesList}\n               </ul>\n               <div className=\"side-footer\">\n                    <Footer />\n               </div>\n          </>\n     );\n}\n\nexport default SidebarFilter;","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst EmojiSaveResponse = () => {\n     const state = useSelector(state => ({\n          responseMessage: state.emojisRed.responseMessage\n     }))\n\n     return (\n          <div className=\"emoji-save-response\">\n               <h1>{state.responseMessage}</h1>\n          </div>\n     )\n}\n\nexport default EmojiSaveResponse\n","import React from 'react';\nimport EmojiSearchForm from '../components/EmojiSearchForm';\nimport EmojiList from '../containers/EmojiList'\nimport SidebarFilter from '../containers/SidebarFilter'\nimport EmojiSaveResponse from '../../../Static/components/EmojiSaveResponse'\n\nconst EmojiContainer = () => {\n\n     //todo: this is just the container that holds all other parts of the emojiSearch feature\n     return (\n          <>\n               <EmojiSaveResponse />\n               <div className=\"wrapper\">\n                    <div className=\"sidebar-nav\">\n                         <SidebarFilter />\n                    </div>\n                    <div className=\"form-and-list-cont\">\n                         <div className=\"form\">\n                              <EmojiSearchForm />\n                         </div>\n                         <div className=\"emoji-list\">\n                              <EmojiList />\n                         </div>\n                    </div>\n               </div>\n          </>\n     );\n}\n\nexport default EmojiContainer","//! importing necessary files and/or libraries\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { loadEmojis, loadCategories } from '../Store/Middleware/apiEmojiSearch';\nimport { validateSession } from '../Store/Middleware/serverAuth';\nimport Login from '../Auth/Login'\nimport Registration from '../Auth/Registration'\nimport NotFound from '../Pages/NotFound'\nimport { helper } from '../Tools/helper'\nimport HeaderIfLoggedIn from '../Static/components/HeaderIfLoggedIn';\nimport HeaderIfLoggedOut from '../Static/components/HeaderIfLoggedOut';\nimport Dashboard from '../Pages/DashboardPage/containers/Dashboard';\nimport EmojiContainer from '../Pages/EmojiSearchPage/containers/EmojiContainer'\n\nclass App extends Component {\n  //todo: inside this lifecycle method I'm loading the emojis and categories to work with later on throughout the application\n  componentDidMount() {\n    //todo: getting the below methods from props\n    const {\n      loadEmojis,\n      loadCategories,\n      loggedInStatus,\n      validateSession\n    } = this.props\n\n    validateSession(loggedInStatus)\n    loadEmojis()\n    loadCategories()\n  }\n  \n  render() {\n    const { userData } = this.props\n    const { userIsLoggedIn } = helper\n    return (\n      <div className=\"App\">\n        { userIsLoggedIn(userData) ? <HeaderIfLoggedIn /> : <HeaderIfLoggedOut/> }\n        <Switch>\n          <Route\n            path='/login'\n            render={props => {\n              return userIsLoggedIn(userData) ? <Redirect to=\"/\" /> : <Login {...props} />\n            }} \n          />\n          <Route\n            path='/signup'\n            render={props => {\n              return userIsLoggedIn(userData) ? <Redirect to=\"/\" /> : <Registration {...props} /> \n            }}\n          />\n          <Route \n              path='/emojis'\n              render={props => <EmojiContainer {...props} />} \n          />\n          <Route\n            path=\"/not_found\"\n            component={NotFound} \n          />\n          <Route\n            exact\n            path=\"/\"\n            render={props => {\n              return userIsLoggedIn(userData) ? <Dashboard {...props} /> : <Redirect to=\"/login\" />\n            }}\n          />\n          <Redirect to=\"/not_found\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loggedInStatus: state.authRed.loggedInStatus,\n  userData: state.authRed.userData,\n  loading: state.emojisRed.loading,\n})\n\n//todo: mapping my dispatch to props \nconst mapDispatchToProps = dispatch => ({\n  loadEmojis: () => dispatch(loadEmojis()),\n  loadCategories: () => dispatch(loadCategories()),\n  validateSession: status => dispatch(validateSession(status)),\n})\n\n//todo: using connect() allows me to 'connect' a component to the store\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport manageEmojis from '../Store/Actions/manageEmojisReducer'\nimport manageAuth from '../Store/Actions/manageAuthReducer'\n\nconst rootReducer = combineReducers({\n     emojisRed: manageEmojis,\n     authRed: manageAuth\n})\n\nexport default rootReducer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Main/App'\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './Store/reducer'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}